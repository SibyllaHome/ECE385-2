/************************************************************************
Lab 9 Nios Software

Dong Kai Wang, Fall 2017
Christine Chen, Fall 2013

For use with ECE 385 Experiment 9
University of Illinois ECE Department
************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include "aes.h"

// Pointer to base address of AES module, make sure it matches Qsys
volatile unsigned int * AES_PTR = (unsigned int *) 0x00000040;

// Execution mode: 0 for testing, 1 for benchmarking
int run_mode = 0;

/** charToHex
 *  Convert a single character to the 4-bit value it represents.
 *
 *  Input: a character c (e.g. 'A')
 *  Output: converted 4-bit value (e.g. 0xA)
 */
char charToHex(char c)
{
	char hex = c;

	if (hex >= '0' && hex <= '9')
		hex -= '0';
	else if (hex >= 'A' && hex <= 'F')
	{
		hex -= 'A';
		hex += 10;
	}
	else if (hex >= 'a' && hex <= 'f')
	{
		hex -= 'a';
		hex += 10;
	}
	return hex;
}

/** charsToHex
 *  Convert two characters to byte value it represents.
 *  Inputs must be 0-9, A-F, or a-f.
 *
 *  Input: two characters c1 and c2 (e.g. 'A' and '7')
 *  Output: converted byte value (e.g. 0xA7)
 */
char charsToHex(char c1, char c2)
{
	char hex1 = charToHex(c1);
	char hex2 = charToHex(c2);
	return (hex1 << 4) + hex2;
}


unsigned long SubWord(unsigned long word){
	unsigned char* temp = (unsigned char*) &word;
	*temp 		= aes_sbox[(int) *temp];
	*(temp + 1) = aes_sbox[(int) *(temp + 1)];
	*(temp + 2) = aes_sbox[(int) *(temp + 2)];
	*(temp + 3) = aes_sbox[(int) *(temp + 3)];
	return word;
}

unsigned long RotWord(unsigned long * word){
	return ((*word << 8) | (*word >> 24));
}

void SubBytes(unsigned char* state){
	int i = 0;
	while(i < 16){
		*(state + i) = aes_sbox[(int) *(state + i)];
		i++;
	}
}




void KeyExpansion(unsigned char* key, unsigned long* w, unsigned Nk){
	unsigned long temp;
	int i = 0;
	while(i < Nk){
		w[i] = (key[4*i] << 24) | (key[4*i + 1] << 16) | (key[4*i + 2] << 8) | key[4*i + 3];
		i++;
	}
	i = Nk;
	while(i < 4 * (10 + 1)){
		temp = w[i - 1];
		if(i % Nk == 0){
			temp = SubWord(RotWord(&temp)) ^ Rcon[i/Nk];
		}
		w[i] = w[i - Nk] ^ temp;
		i++;
	}
}



void AddRoundKey(unsigned char* state, unsigned long* roundkey){
	state[0] = state[0] ^ ((roundkey[0] >> 24)); // 0xFF
	state[1] = state[1] ^ ((roundkey[1] >> 24)); // 0xFF
	state[2] = state[2] ^ ((roundkey[2] >> 24)); // 0xFF
	state[3] = state[3] ^ ((roundkey[3] >> 24)); // 0xFF

	state[4] = state[4] ^ ((roundkey[0] >> 16)); // 0xFF
	state[5] = state[5] ^ ((roundkey[1] >> 16)); // 0xFF
	state[6] = state[6] ^ ((roundkey[2] >> 16)); // 0xFF
	state[7] = state[7] ^ ((roundkey[3] >> 16)); // 0xFF

	state[8] = state[8] ^ ((roundkey[0] >> 8)); // 0xFF
	state[9] = state[9] ^ ((roundkey[1] >> 8)); // 0xFF
	state[10] = state[10] ^ ((roundkey[2] >> 8)); // 0xFF
	state[11] = state[11] ^ ((roundkey[3] >> 8)); // 0xFF

	state[12] = state[12] ^ (roundkey[0]); // 0xFF
	state[13] = state[13] ^ (roundkey[1]); // 0xFF
	state[14] = state[14] ^ (roundkey[2]); // 0xFF
	state[15] = state[15] ^ (roundkey[3]); // 0xFF
}

void ShiftRows(unsigned char* state){
	//first row not change

	//second row
	unsigned char temp = state[4];
	state[4] = state[5];
	state[5] = state[6];
	state[6] = state[7];
	state[7] = temp;

	//third row
	unsigned char temp1 = state[8];
	unsigned char temp2 = state[9];
	state[8] = state[10];
	state[9] = state[11];
	state[10] = temp1;
	state[11] = temp2;

	//fourth row
	unsigned temp3 = state[15];
	state[15] = state[14];
	state[14] = state[13];
	state[13] = state[12];
	state[12] = temp3;

}

void mixColumns(unsigned char* a){
	unsigned char b[16];
	b[0]  = gf_mul[a[0]][0] ^ gf_mul[a[4]][1] ^ a[8] ^ a[12];
	b[4]  = a[0] ^ gf_mul[a[4]][0] ^ gf_mul[a[8]][1] ^ a[12];
	b[8]  = a[0] ^ a[4] ^ gf_mul[a[8]][0] ^ gf_mul[a[12]][1];
	b[12] = gf_mul[a[0]][1] ^ a[4] ^ a[8] ^ gf_mul[a[12]][0];

	b[1]  = gf_mul[a[1]][0] ^ gf_mul[a[5]][1] ^ a[9] ^ a[13];
	b[5]  = a[1] ^ gf_mul[a[5]][0] ^ gf_mul[a[9]][1] ^ a[13];
	b[9]  = a[1] ^ a[5] ^ gf_mul[a[9]][0] ^ gf_mul[a[13]][1];
	b[13] = gf_mul[a[1]][1] ^ a[5] ^ a[9] ^ gf_mul[a[13]][0];

	b[2]  = gf_mul[a[2]][0] ^ gf_mul[a[6]][1] ^ a[10] ^ a[14];
	b[6]  = a[2] ^ gf_mul[a[6]][0] ^ gf_mul[a[10]][1] ^ a[14];
	b[10] = a[2] ^ a[6] ^ gf_mul[a[10]][0] ^ gf_mul[a[14]][1];
	b[14] = gf_mul[a[2]][1] ^ a[6] ^ a[10] ^ gf_mul[a[14]][0];

	b[3]  = gf_mul[a[3]][0] ^ gf_mul[a[7]][1] ^ a[11] ^ a[15];
	b[7]  = a[3] ^ gf_mul[a[7]][0] ^ gf_mul[a[11]][1] ^ a[15];
	b[11] = a[3] ^ a[7] ^ gf_mul[a[11]][0] ^ gf_mul[a[15]][1];
	b[15] = gf_mul[a[3]][1] ^ a[7] ^ a[11] ^ gf_mul[a[15]][0];

	int i = 0;
	while(i < 16){
		//copy
		a[i] = b[i];
		i++;
	}
}


// //alternative version of RotWord
// unsigned long RotWord(unsigned long word){
// 	return (word << 8 | word << 24);
// }



/** encrypt
 *  Perform AES encryption in software.
 *
 *  Input: msg_ascii - Pointer to 32x 8-bit char array that contains the input message in ASCII format
 *         key_ascii - Pointer to 32x 8-bit char array that contains the input key in ASCII format
 *  Output:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *               key - Pointer to 4x 32-bit int array that contains the input key
 */
void encrypt(unsigned char * plaintext_asc, unsigned char * key_asc, unsigned long * state, unsigned long * key)
{
 unsigned long roundkey[44]; // 11 round keys in 4x 32bit format
 unsigned char tempKey[16]; // store key as an array of unsigned characters
 unsigned char tempState[16]; // store state as an array of unsigned characters

 /*Initialize state/key arrays to the initial plaintext and key*/
 int row, col, i;
for (row = 0; row < 4; row++) {
 for (col = 0; col < 4; col++) {
  i = col+row*4;
  tempKey[col+row*4] = charsToHex(key_asc[2*i], key_asc[2*i+1]);
  tempState[row+col*4] = charsToHex(plaintext_asc[2*i], plaintext_asc[2*i+1]);
 }
}

for(i = 0; i < 4; i++)
  key[i] = ((tempKey[4*i] << 24) | (tempKey[4*i+1] << 16) | (tempKey[4*i+2] << 8) | tempKey[4*i+3]);


 KeyExpansion(tempKey, roundkey, 4);

// printf("Initial Round K")
// printf("%08x %08x\n%08x %08x\n",roundkey[0], roundkey[1], roundkey[2], roundkey[3]);

 AddRoundKey(tempState, roundkey);

// printf("After Initial Add Round Key:\n");
// printf("%08x %08x\n%08x %08x\n",roundkey[0], roundkey[1], roundkey[2], roundkey[3]);
// printf("State_temp:\n%08x %08x\n %08x %08x\n",tempState[0], tempState[1], tempState[2], tempState[3]);

// 9 rounds
for (int round = 1; round < 10; round++) {
 SubBytes(tempState);
 ShiftRows(tempState);
 mixColumns(tempState);
 AddRoundKey(tempState, roundkey + 4*round);
}

 // last round
SubBytes(tempState);
ShiftRows(tempState);
AddRoundKey(tempState, roundkey + 40);

//debug
//printf("%08x %08x\n%08x %08x\n",roundkey[40], roundkey[41], roundkey[42], roundkey[43]);

for(i = 0; i < 4; i++){
	key[i] = roundkey[40 + i];
}

AES_PTR[0] = key[0];
AES_PTR[1] = key[1];
AES_PTR[2] = key[2];
AES_PTR[3] = key[3];

//printf("KEY!!:\n%08x %08x\n%08x %08x\n", key[0],key[1],key[2],key[3]);

for(i = 0; i < 4; i++)
 state[i] = ((tempState[4*i] << 24) | (tempState[4*i+1] << 16) | (tempState[4*i+2] << 8) | tempState[4*i+3]);
}





/** decrypt
 *  Perform AES decryption in hardware.
 *
 *  Input:  msg_enc - Pointer to 4x 32-bit int array that contains the encrypted message
 *              key - Pointer to 4x 32-bit int array that contains the input key
 *  Output: msg_dec - Pointer to 4x 32-bit int array that contains the decrypted message
 */
void decrypt(unsigned long * msg_enc, unsigned long * msg_dec, unsigned long * key)
{							//state
	// Implement this function


	AES_PTR[0] = key[0];
	AES_PTR[1] = key[1];
	AES_PTR[2] = key[2];
	AES_PTR[3] = key[3];

	AES_PTR[4] = msg_enc[0];
	AES_PTR[5] = msg_enc[1];
	AES_PTR[6] = msg_enc[2];
	AES_PTR[7] = msg_enc[3];

	AES_PTR[14] = 1;

	while(AES_PTR[15] == 0) {} // Do nothing

	msg_dec[3] = AES_PTR[8];
	msg_dec[2] = AES_PTR[9];
	msg_dec[1] = AES_PTR[10];
	msg_dec[0] = AES_PTR[11];

	AES_PTR[14] = 0;

}

/** main
 *  Allows the user to enter the message, key, and select execution mode
 *
 */
int main()
{
	// Input Message and Key as 32x 8-bit ASCII Characters ([33] is for NULL terminator)
	unsigned char msg_ascii[33];
	unsigned char key_ascii[33];
	// Key, Encrypted Message, and Decrypted Message in 4x 32-bit Format to facilitate Read/Write to Hardware
	unsigned long key[4];
	unsigned long msg_enc[4];
	unsigned long msg_dec[4];

	printf("Select execution mode: 0 for testing, 1 for benchmarking: ");
	scanf("%d", &run_mode);

	if (run_mode == 0) {
		// Continuously Perform Encryption and Decryption
		while (1) {
			int i = 0;
			printf("\nEnter Message:\n");
			scanf("%s", msg_ascii);
			printf("\n");
			printf("\nEnter Key:\n");
			scanf("%s", key_ascii);
			printf("\n");
			encrypt(msg_ascii, key_ascii, msg_enc, key);
			//debug
//			printf("KEY!! in main!:\n%08x %08x\n%08x %08x\n", key[0],key[1],key[2],key[3]);
			//debug
			printf("\nEncrpted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x\n", msg_enc[i]);
			}
			printf("\n");
			decrypt(msg_enc, msg_dec, key);
			printf("\nDecrypted message is: \n");
			for(i = 0; i < 4; i++){
				printf("%08x\n", msg_dec[i]);
			}
			printf("\n");
		}
	}
	else {
		// Run the Benchmark
		int i = 0;
		int size_KB = 2;
		// Choose a random Plaintext and Key
		for (i = 0; i < 32; i++) {
			msg_ascii[i] = 'a';
			key_ascii[i] = 'b';
		}
		// Run Encryption
		clock_t begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			encrypt(msg_ascii, key_ascii, msg_enc, key);
		clock_t end = clock();
		double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		double speed = size_KB / time_spent;
		printf("Software Encryption Speed: %f KB/s \n", speed);
		// Run Decryption
		begin = clock();
		for (i = 0; i < size_KB * 64; i++)
			decrypt(msg_enc, msg_dec, key);
		end = clock();
		time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
		speed = size_KB / time_spent;
		printf("Hardware Encryption Speed: %f KB/s \n", speed);
	}
	return 0;
}











